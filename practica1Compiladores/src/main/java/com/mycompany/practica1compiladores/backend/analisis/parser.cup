package com.mycompany.practica1compiladores.backend.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
//import org.example.backend.interprete.abstracto.Instruccion;
//import org.example.backend.interprete.expresion.*;
//import org.example.backend.interprete.error.*;
//import org.example.backend.interprete.simbol.*;

//import org.example.backend.interprete.instruccion.*;

class Parser;

parser code {:

    //public LinkedList<Errores> listaErrores = new LinkedList<>();

//TipoError tipo, String desc, int lineaa, int columaa
    public void syntax_error(Symbol s){
        // listaErrores.add(new Errores(
        //                 TipoError.SINTACTICO,
        //                 ", Recuperable. No se esperaba el componente "+s.value,
        //                 s.left,
        //                 s.right));
        System.out.println("Error Sintactico: " + s.value + " | ["+ s.left + ", " + s.right +" ]");
    }

    public void unrecovered_syntax_error (Symbol s){
        // listaErrores.add(new Errores(
        //                 TipoError.SINTACTICO,
        //                 ", No Recuperable. No se esperaba el componente "+s.value,
        //                 s.left,
        //                 s.right));
    System.out.println("Error Sintactico: " + s.value + " | ["+ s.left + ", " + s.right +" ]");
    }
:}


//** Simboloes terminal **//
terminal String CADENA, ENTERO, DECIMAL, ID;
terminal LPAREN, RPAREN, MAS, MENOS, POR, DIV, LINEA, CURVA;
terminal COL_AZUL, COL_ROJO, COL_AMARILLO, COL_VERDE, COL_GRIS;
terminal COL_NEGRO, COL_NARANJA, COL_CELESTE, COL_VIOLETA;
terminal GRAFICAR, CIRCULO, CUADRADO, RECTANGULO, POLIGONO, ANIMAR;
terminal OBJETO, ANTERIOR;

//** Simbolos no terminales **//
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal LinkedList<Instruccion> CASOS;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion SIF, SBREAK, SCONTINUAR, SMATCH, CASO;
nonterminal Instruccion SFOR, REFRESH_FOR, SWHILE, SDO;
nonterminal Instruccion PRINT, FROUND, FLENGTH, FFIND;
nonterminal Instruccion DECLARACION, ASIGNACION;
nonterminal LinkedList<Instruccion> LISTA;
nonterminal LinkedList<LinkedList> MATRIZ;
nonterminal LinkedList<HashMap> DECPARAMETROS;
nonterminal LinkedList<Instruccion> CALLPARAMS;
nonterminal Instruccion DECLARACION_VECTOR, ASIGN_VECTOR;
nonterminal Instruccion DEC_LIST, AGREGAR, ELIMINAR;
nonterminal Instruccion EXPRESION;
nonterminal Instruccion EXPR2, EXPR3, EXPR4, EXPR5;
nonterminal Instruccion METODO;
nonterminal Instruccion MAIN;
nonterminal Instruccion RETORNO;
nonterminal Instruccion LLAMADA;
nonterminal Tipo TIPOS;

//** Precedencia **//
//precedence left OR, AND, XOR;
//precedence right NOT;
//precedence left EQ, NE, MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
precedence left MAS, MENOS;
precedence left TIMES, DIVIDE, MOD;
precedence right UMENOS;
//precedence right CAST;


//** Definir gramaticas **//
start with INICIO;

INICIO ::= INSTRUCCIONES:a      {:   RESULT = a;   :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                     {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= PRINT: a                {:   RESULT = a;   :}
              | DECLARACION: a          {:   RESULT = a;   :}
              | error FIN_INSTRUCCION
;

PRINT ::= PRINTLN LPAREN EXPRESION:a RPAREN FIN_INSTRUCCION      {:     RESULT = new Print(a, aleft, aright);   :}
;
