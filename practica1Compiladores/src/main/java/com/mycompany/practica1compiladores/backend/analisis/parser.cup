package com.mycompany.practica1compiladores.backend.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.mycompany.practica1compiladores.backend.instruccion.*;
import com.mycompany.practica1compiladores.backend.error.ErrorC;
import com.mycompany.practica1compiladores.backend.error.TipoError;
import com.mycompany.practica1compiladores.backend.expresion.*;
import com.mycompany.practica1compiladores.backend.symbol.*;
import com.mycompany.practica1compiladores.view.figura.ColorEnum;
import com.mycompany.practica1compiladores.backend.Ocurrencia;

class Parser;

parser code {:
    public LinkedList<ErrorC> listaError = new LinkedList<>();
    public static LinkedList<Ocurrencia> listaOc = new LinkedList<>();

//TipoError tipo, String desc, int lineaa, int columaa
    public void syntax_error(Symbol s){
         listaError.add(new ErrorC(
                         TipoError.SINTACTICO,
                         ", Recuperable. No se esperaba el componente "+s.value,
                         s.left,
                         s.right));
        //System.out.println("Error Sintactico: " + s.value + " | ["+ s.left + ", " + s.right +" ]");
    }

    public void unrecovered_syntax_error (Symbol s){
         listaError.add(new ErrorC(
                         TipoError.SINTACTICO,
                         ", No Recuperable. No se esperaba el componente "+s.value,
                         s.left,
                         s.right));
    //System.out.println("Error Sintactico: " + s.value + " | ["+ s.left + ", " + s.right +" ]");
    }
:}


//** Simboloes terminal **//
terminal String ENTERO, DECIMAL, ID;
terminal LPAREN, RPAREN, MAS, MENOS, POR, DIV, LINEA, CURVA, UMENOS;
terminal COL_AZUL, COL_ROJO, COL_AMARILLO, COL_VERDE, COL_GRIS;
terminal COL_NEGRO, COL_NARANJA, COL_CELESTE, COL_VIOLETA;
terminal GRAFICAR, CIRCULO, CUADRADO, RECTANGULO, POLIGONO, ANIMAR;
terminal OBJETO, ANTERIOR, COMA;// FIN;

//** Simbolos no terminales **//
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion EXPRESION, GRAPH;
nonterminal Instruccion EXPR;
nonterminal ANI;
//nonterminal Tipo TIPOS;
nonterminal TipoColor COLORES;
//nonterminal TipoFigura FIGURAS;

//** Precedencia **//
precedence left MAS, MENOS;
precedence left POR, DIV;
precedence right UMENOS;


//** Definir gramaticas **//
start with INICIO;

INICIO ::= INSTRUCCIONES:a      {:   RESULT = a;   :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                     {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= GRAPH:a         {:      RESULT = a;     :}
              | ANI//:a         {:      RESULT = a;     :}
            //| EXPRESION: a    {:      RESULT = a;     :}
              | error
;
        //<nombre>, <posx>, <posy>, <radio>, <color>
GRAPH ::= GRAFICAR CIRCULO LPAREN EXPRESION:a COMA EXPRESION:b COMA EXPRESION:c COMA EXPRESION:d COMA COLORES:e RPAREN 
            {:  RESULT = new GraficarF(a, b, c, d, FiguraEnum.CIRCULO, e, aleft, aright);   :}
        //<nombre>, <posx>, <posy>, <tamaÃ±o lado>, <color>
        | GRAFICAR CUADRADO LPAREN EXPRESION:a COMA EXPRESION:b COMA EXPRESION:c COMA EXPRESION:d COMA COLORES:e RPAREN
            {:  RESULT = new GraficarF(a, b, c, d, FiguraEnum.CUADRADO, e, aleft, aright);   :}
        //(<nombre>, <posx>, <posy>, <ancho>, <alto>, <color>
        | GRAFICAR RECTANGULO LPAREN EXPRESION:a COMA EXPRESION:b COMA EXPRESION:c COMA EXPRESION:d COMA EXPRESION:e COMA COLORES:f RPAREN 
            {:  RESULT = new GraficarF(a, b, c, d, e,FiguraEnum.RECTANGULO, f, aleft, aright);   :}            
        //<nombre>, <posx1>, <posy1>, <posx2>, <posy2>, <color>
        | GRAFICAR LINEA LPAREN EXPRESION:a COMA EXPRESION:b COMA EXPRESION:c COMA EXPRESION:d COMA EXPRESION:e COMA COLORES:f RPAREN 
            {:  RESULT = new GraficarF(a, b, c, d, e,FiguraEnum.LINEA, f, aleft, aright);   :}  
        //<nombre>, <posx>, <posy>, <cantidad lados>, <ancho>, <alto>, <color>
        | GRAFICAR POLIGONO LPAREN EXPRESION:a COMA EXPRESION:b COMA EXPRESION:c COMA EXPRESION:d COMA EXPRESION:e COMA EXPRESION:f COMA COLORES:g RPAREN 
            {:  RESULT = new GraficarF(a, b, c, d, e, f, FiguraEnum.POLIGONO, g, aleft, aright);   :}  
;
//(<tipoanimacion>, <destinox>, <destinoy>, <orden>
ANI ::= ANIMAR OBJETO ANTERIOR LPAREN LINEA COMA EXPRESION COMA EXPRESION COMA EXPRESION RPAREN
            {:      System.out.println("ANIMAR OBJETO -> LINEA");    :}
      | ANIMAR OBJETO ANTERIOR LPAREN CURVA COMA EXPRESION COMA EXPRESION COMA EXPRESION RPAREN
            {:      System.out.println("ANIMAR OBJETO -> CURVA");    :}
;

//Var(Tipo tipo, Object valor, int linea, int columna)
EXPRESION ::= MENOS EXPRESION:a                 {:  RESULT = new Aritmetico(a, OpAritmetic.NEGACION, aleft, aright);    :}%prec UMENOS
            | EXPRESION:a MAS EXPRESION:b       {:  RESULT = new Aritmetico(a, b, OpAritmetic.SUMA, aleft, aright);     :}
            | EXPRESION:a MENOS EXPRESION:b     {:  RESULT = new Aritmetico(a, b, OpAritmetic.RESTA, aleft, aright);    :}
            | EXPRESION:a POR EXPRESION:b       {:  RESULT = new Aritmetico(a, b, OpAritmetic.MULT, aleft, aright);    :}
            | EXPRESION:a DIV EXPRESION:b       {:  RESULT = new Aritmetico(a, b, OpAritmetic.DIVISION, aleft, aright);    :}
            | LPAREN EXPRESION:a RPAREN         {:  RESULT = a;    :}
            | ENTERO:a                          {:  RESULT = new Var(new Tipo(TipoDeDato.ENTERO), Integer.parseInt(a), aleft, aright);       :}
            | DECIMAL:a                         {:  RESULT = new Var(new Tipo(TipoDeDato.DECIMAL), Double.parseDouble(a), aleft, aright);    :}
            | ID:a                              {:  RESULT = new Var(new Tipo(TipoDeDato.ID), a, aleft, aright);    :}
;

//EXPR ::= ID:a                              {:  RESULT = new Var(new Tipo(TipoDeDato.ID), a, aleft, aright);    :};

COLORES ::= COL_AMARILLO    {:  RESULT = new TipoColor(ColorEnum.AMARILLO);     :} 
          | COL_VERDE       {:  RESULT = new TipoColor(ColorEnum.VERDE);        :} 
          | COL_ROJO        {:  RESULT = new TipoColor(ColorEnum.ROJO);         :}
          | COL_GRIS        {:  RESULT = new TipoColor(ColorEnum.GRIS);         :}
          | COL_AZUL        {:  RESULT = new TipoColor(ColorEnum.AZUL);         :}
          | COL_NARANJA     {:  RESULT = new TipoColor(ColorEnum.NARANJA);      :}
          | COL_CELESTE     {:  RESULT = new TipoColor(ColorEnum.CELESTE);      :}
          | COL_VIOLETA     {:  RESULT = new TipoColor(ColorEnum.VIOLETA);      :}
          | COL_NEGRO       {:  RESULT = new TipoColor(ColorEnum.NEGRO);        :}          
;

